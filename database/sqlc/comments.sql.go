// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: comments.sql

package database

import (
	"context"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (
  movie_id, comment, comment_ip_address
) VALUES (
  $1, $2, $3
)
RETURNING id, movie_id, comment_ip_address, comment, created_at
`

type CreateCommentParams struct {
	MovieID          string `json:"movie_id"`
	Comment          string `json:"comment"`
	CommentIpAddress string `json:"comment_ip_address"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comments, error) {
	row := q.db.QueryRowContext(ctx, createComment, arg.MovieID, arg.Comment, arg.CommentIpAddress)
	var i Comments
	err := row.Scan(
		&i.ID,
		&i.MovieID,
		&i.CommentIpAddress,
		&i.Comment,
		&i.CreatedAt,
	)
	return i, err
}

const listComments = `-- name: ListComments :many
SELECT id, movie_id, comment_ip_address, comment, created_at FROM comments
WHERE movie_id = $1
ORDER BY date(created_at) DESC
LIMIT $2
OFFSET $3
`

type ListCommentsParams struct {
	MovieID string `json:"movie_id"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

func (q *Queries) ListComments(ctx context.Context, arg ListCommentsParams) ([]Comments, error) {
	rows, err := q.db.QueryContext(ctx, listComments, arg.MovieID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Comments{}
	for rows.Next() {
		var i Comments
		if err := rows.Scan(
			&i.ID,
			&i.MovieID,
			&i.CommentIpAddress,
			&i.Comment,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
